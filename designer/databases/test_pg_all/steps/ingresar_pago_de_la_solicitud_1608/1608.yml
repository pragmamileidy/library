--- 
id: 1608
name: Ingresar Pago de la Solicitud
label: Ingresar Pago de la Solicitud
description: Ingresar Pago de la Solicitud
fill_step_id: 794
created_at: 2014-02-14 22:04:05 Z
updated_at: 2014-02-14 22:04:05 Z
include: "{\"3483\":{\"2567\":{\"2892\":{\"views\":\"default\",\"enabled\":\"disabled\"}}},\"3489\":{\"2893\":{\"1366\":{\"views\":\"default\",\"enabled\":\"enabled\"},\"1367\":{\"views\":\"default\",\"enabled\":\"enabled\"},\"1368\":{\"views\":\"default\",\"enabled\":\"enabled\"},\"1369\":{\"views\":\"default\",\"enabled\":\"enabled\"},\"1371\":{\"views\":\"default\",\"enabled\":\"enabled\"},\"2544\":{\"views\":\"default\",\"enabled\":\"enabled\"}}}}"
allowed_next_to_steps: ""
allowed_back_to_steps: ""
controls: ,back,close,close_and_save,save,submit
on_becoming: "\t\t# Limpiar el contenido de los campos\r\n\
  (1..15).each do |_num|\t\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.numero_de_recibo_deposito\", \"\")\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.fecha_del_pago\", \"\")\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.monto_del_pago\", \"\")\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.banco\", \"\")\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.observaciones\", \"\")\r\n\
  \t\tform_data.set(\"datos_de_pago_p5_instance_#{_num}.datos_de_pago.comprobante_de_pago\", \"\")\r\n end\r\n\
  \r\n\
  \r\n\
  form_data.routes.select{|r| r =~ /entidad_evaluadora_revisiones.entidad_evaluadora_(\\d+)\\.pagada/}.each{ |pagada|\r\n  next unless form_data.get(pagada) == 'Iniciada'\r\n  form_data.set(pagada, 'Si')\r\n\
  }\r\n\
  \r\n\
  form_data.set(\"entidades_fijas.entidad.pagada\",\"Si\") if form_data.get(\"entidades_fijas.entidad.pagada\")==\"Iniciada\"\r\n"
on_transition: "  error = false #Variable booleana\r\n _applicationId = @application[\"id\"] #obteniendo el id\r\n _taskId = @task[\"id\"] #id de la tarea\r\n ## Declaracion de arreglos para pagos y fechas\r\n arreglo_de_pagos = [] \r\n arreglo_de_fechas = []\r\n  #inicializacion de variables suma en cero y pago1 con el valor contenido dentro del campo monto total\r\n  _suma = 0 \r\n   pago1 = form_data.get(\"entidad_evaluadora_revisiones.monto_total.monto_total\").to_f\r\n   mensaje = \"\"\r\n   \r\n   #Inicio del ciclo each para obtener informacion de los datos del pago\r\n\
  \t(1..15).each do |x|\r\n\
  \t\tinstance_x = \"_instance_#{x}\"\r\n\
  \t\tmonto = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.monto_del_pago\")\r\n\
  \t\t_suma = _suma.to_f + monto.to_f\r\n\
  \t\trecibo = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.numero_de_recibo_deposito\")\r\n\
  \t\tfecha = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.fecha_del_pago\")\r\n\
  \t\t#monto = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.monto_del_pago\")\r\n\
  \t\tbanco = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.banco\")\r\n\
  \t\tcomprobante = form_data.get(\"datos_de_pago_p5#{instance_x}.datos_de_pago.comprobante_de_pago\")\t\r\n\
  \t\r\n\
  \t\t\t#verificacion para que todos los campos necesarios sean llenado\r\n\
  \t\tif ((monto != \"\" && (recibo == \"\" || fecha == \"\" || banco == \"\" || comprobante == \"\")) ||\r\n                   (recibo != \"\"  && (monto == \"\" || fecha == \"\" || banco == \"\"  || comprobante == \"\")) ||\r\n                   (fecha != \"\" && (monto == \"\" || recibo == \"\" || banco == \"\" || comprobante == \"\")) ||\r\n                   (banco != \"\"  && (monto == \"\" || recibo == \"\" || fecha == \"\" || comprobante == \"\")) ||\r\n                  (comprobante != \"\" && (monto == \"\" || recibo == \"\" || fecha == \"\" || banco == \"\")))\r\n\
  \t\t\t\r\n\
  \t\t\t\tmensaje << \"Los siguientes datos son requeridos en la instancia #{x}: N\xC3\xBAmero de Recibo, Fecha de Pago, Monto del Pago, Banco y Comprobante del Pago. \"\r\n\
  \t\telse\t\r\n\
  \t\t\t\t#llenando l arreglo de pagos segun sean los datos introducidos en las instancias\r\n\
  \t\t\t\tif (!monto.blank? && !recibo.blank? && !fecha.blank? && !banco.blank? && !comprobante.nil?)\r\n\
  \t\t\t\t\t\t\r\n\
  \t\t\t\t\tpagos = {\"reference_number\"=> \"#{recibo}\",\r\n\
  \t\t\t\t\t\t\t\t\"payment_date\"=> \"#{fecha}\",\r\n\
  \t\t\t\t\t\t\t\t\"bank\"=>\"#{banco}\",\r\n\
  \t\t\t\t\t\t\t\t\"amount\"=>\"#{monto}\",\r\n\
  \t\t\t\t\t\t\t\t\"attachment_id\"=>\"#{comprobante}\"\r\n\
  \t\t\t\t\t}\r\n\
  \t\t\t\t\tarreglo_de_pagos << pagos\r\n\
  \t\t\t\t\t\tarreglo_de_fechas[x] = fecha\r\n\
  \t\t\t\tend\r\n\
  \t\tend\r\n\
  \t end\r\n   \r\n\
  \r\n   if !mensaje.blank?\r\n        error = true\r\n\
  \t\ttransition_errors << \"#{mensaje}\"\r\n\
  \tend\r\n\
  \t\t\t####### Validacion de fechas\r\n\
  \t\t\t\r\n\
  \tif (!error) #si no hubo error en la validacion anterior, se procede a evaular las fechas de los pagos\r\n\
  \t\t(1..5).each do |j|\r\n\
  \t\t\t\r\n\
  \t\t\tfecha1 = arreglo_de_fechas[j].to_s\t\r\n\
  \t\t\t\tif  !fecha1.blank?\r\n\
  \t\t\t\t\tif (fecha1.to_date > Date.today)\r\n\
  \t\t\t\t\t\terror = true\r\n\
  \t\t\t\t\t\ttransition_errors << \" La fecha del recibo del pago #{j} no debe ser mayor a la fecha actual. \"\r\n\
  \t\t\t\t\tend\r\n\
  \t\t\t\tend\r\n\
  \t\t\t\r\n\
  \t\tend\r\n\
  \tend\r\n\
  \r\n\
  #################Validaci\xC3\xB3n monto del pago\r\n\
  \t#si suma es mayor o menor al pago total, se incluira el mensaje de error\t\r\n\
  \tif (!error) #si no hubo error n la validacion de fechas se procede a verificar el monto total del pago\r\n\
  \t\t\tif (_suma > pago1)\r\n\
  \t\t\t\terror = true\r\n\
  \t\t\t\ttransition_errors << \"El monto final de todos sus pagos #{_suma} es mayor al monto total a pagar  requerido #{pago1}. \" \r\n\
  \t\t\t\t\t\r\n\
  \t\t\tend\r\n\
  \t\t\tif (_suma < pago1)\r\n\
  \t\t\t\terror = true\r\n\
  \t\t\t\ttransition_errors << \"El monto final de todos sus pagos #{_suma} es menor al monto total a pagar requerido #{pago1}. \"\r\n\
  \t\t\tend\t\r\n\
  \tend\r\n\
  \t\t###### Validacion de Pago valido\t\r\n\
  \tif (!error) #si no hubo error en lo anterior se procede a registrar el pago\r\n\
  \t\tresult =  PaymentProxy.register_manual_payments(_applicationId,arreglo_de_pagos, _taskId)\r\n\
  \t\t\r\n\
  \t\tif (!result[:create]) \r\n                        error = true\r\n\
  \t\t\ttransition_errors << \"Su pago no puede ser procesado dado que un N\xC3\xBAmero de Deposito Introducido ya ha sido registrado. Por Favor Verifique. \"\r\n\
  \t\tend \r\n\
  \tend\r\n\
  \r\n\
  if (!error)\r\n  id_pago = form_data.get(\"variables_usadas_codigos_p5.variables_p5.payment\")\r\n  respuesta_del_agente = \"OK\"\r\n  PaymentProxy.payment_reception(id_pago, respuesta_del_agente)\r\n\
  end\r\n"
views: 
back_step: Pago Manual de la Solicitud
next_step: ""
position: 1
ajax_calls: ""
